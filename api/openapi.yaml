openapi: "3.0.0"
info:
    description: "Bookmark is an api server"
    version: "1.0.0"
    title: "Bookmark"
    termsOfService: "http://example.com"
    contact:
        email: "example@example.com"
    license:
        name: "MIT"
servers:
    - url: http://localhost
      description: Development server
paths:
    /users:
        post:
            tags:
                - users
            summary: Create a new User
            description: Create a new User and return JWT (Json Web Token) for authorization
            security:
                - bearerAuth: []
            parameters: []
            requestBody:
                description: user to create
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/User"
                        example:
                            username: "Bob"
                            password: "12345abcde"
            responses:
                "201":
                    description: CREATED
                    headers:
                        Authorization:
                            schema:
                                type: string
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                            description: Json Web Token for the user
                "400":
                    description: Cannot parse request body
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                            example:
                                code: 0
                                message: "Username and Password must be set in request."
                "500":
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                            example:
                                code: 0
                                message: "The username is already used."
    /login:
        post:
            tags:
                - users
            summary: Login as a user
            description: Login as a user
            parameters: []
            requestBody:
                description: loging username and its password
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/User"
                        example:
                            username: "Bob"
                            password: "12345abcde"
            responses:
                "200":
                    description: OK
                    headers:
                        Authorization:
                            schema:
                                type: string
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                            description: Json Web Token for the user
                "400":
                    description: Cannot parse request body
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                            example:
                                code: 0
                                message: "Username and Password must be set in request."
                "500":
                    description: Internal server error (this includes not found user and using invalid password.)
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                            example:
                                code: 0
                                message: "The username isn't registered."

    /users/:username/books:
        post:
            tags:
                - users
                - books
            summary: create a reading log
            description: That user whose username is 'username' reads a book. and create a reading log.
            parameters: []
            security:
                - bearerAuth: []
            requestBody:
                description: books to create
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Read"
                        example:
                            bookName: "Harry Potter"
                            authorName: "J.K. Rowling"
                            genres: ["fantasy", "for children"]
                            thoughts: "Voldemort scared me a lot."
                            readAt: "2021-10-30"
            responses:
                "201":
                    description: CREATED
                "400":
                    description: Cannot parse request body
                "401":
                    description: Unauthorized
                "500":
                    description: Internal server error
        get:
            tags:
                - users
            summary: get the user's reading log
            description: get the user's reading log
            parameters: []
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    record:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/ReadResp"
                            example:
                                reads:
                                    [
                                        {
                                            readId: "9109j1lkjof3",
                                            bookName: "Harry Potter",
                                            authorName: "J.K. Rowling",
                                            genres: ["fantasy", "for children"],
                                            thoughts: "Voldemort scared me a lot.",
                                            readAt: "2021-10-30",
                                        },
                                        {
                                            readId: "fqp91u3jokelf3",
                                            bookName: "A Christmas Carol",
                                            authorName: "Charles Dickens",
                                            genres: ["for children"],
                                            thoughts: "I want to read at the Christmas.",
                                            readAt: "2022-2-30",
                                        },
                                    ]
                "400":
                    description: Cannot parse request body
                "401":
                    description: Unauthorized
                "500":
                    description: Internal Server Error
    /users/:username/books/:readId:
        get:
            tags:
                - users
                - books
            summary: get the user's reading log about the readId
            description: get the user's reading log about the readId
            parameters: []
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Read"
                            example:
                                {
                                    bookName: "Harry Potter",
                                    authorName: "J.K. Rowling",
                                    genres: ["fantasy", "for children"],
                                    thoughts: "Voldemort scared me a lot.",
                                    readAt: "2021-10-30",
                                }
                "401":
                    description: Unauthorized
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                            example:
                                code: 1
                                message: "database connection failed."

components:
    schemas:
        User:
            type: object
            required:
                - username
                - password
            properties:
                username:
                    type: string
                password:
                    type: string
        Read:
            type: object
            required:
                - bookName
                - authorName
                - readAt
            properties:
                bookName:
                    type: string
                authorName:
                    type: string
                genres:
                    type: array
                    items:
                        type: string
                thoughts:
                    type: string
                readAt:
                    type: string
                    format: date
        ReadResp:
            type: object
            required:
                - bookName
                - authorName
                - readAt
            properties:
                readId:
                    type: string
                bookName:
                    type: string
                authorName:
                    type: string
                genres:
                    type: array
                    items:
                        type: string
                thoughts:
                    type: string
                readAt:
                    type: string
                    format: date
        Error:
            type: object
            required:
                - message
                - code
            properties:
                message:
                    type: string
                code:
                    type: integer
                    description: if code is 0, it is a user-friendly error, else its error must be handled by client.
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
security:
    - bearerAuth: []
tags:
    - name: users
      description: about users
    - name: books
      description: about books
